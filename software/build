#!/bin/sh

export buildClientCommands="no"
export buildBIOS="yes"
export buildOpenMSXConfig="no"
export buildMSXStuff="no"

XMLPATH=openMSX/share/extensions
OPENMSXSRC=../../openMSX/openMSX
export HOME=../../../..
export BIOS=ROM/src/BIOS/msxpibios.asm
export ROMBANK2=$HOME/Dev/MSX/gameroms/ROAD.ROM
export BIOSFILE=target/msxpibios.rom
export ZMAC_PATH=$HOME/Dev/zmac
export HEX2BIN_PATH=$HOME/Dev/bin
export Z80ASM_PATH=$HOME/Dev/z80asm-1.8
export ZCCCFG=/cygdrive/c/Apps/z88dk-win32-2.3/lib/config
export OPENMSXDISK=$HOME/Desktop/MSXPi/commands
export GITPATH=https://github.com/costarc/MSXPi/raw/master/software


MSXPIHOME=/home/pi/msxpi
export PI=raspberrypi

# Functions
UpdateBuildId() {
    fname=$1
    cp $fname $fname.bak
    curdefine=$(cat $fname | grep "^BuildId = ")
    today=$(date +%Y%m%d)
    newbuild=$(cat $fname | grep "BuildId = " | awk '{print $3}' | cut -f2 -d"."|sed 's/"//'|awk '{printf "%03d\n", $1 + 1;}')
    rc=$?
    if [ $rc = 0 ];then
        newdefine="BuildId = \"$today.$newbuild\""
        cat $fname | sed "s/$curdefine/$newdefine/" > $fname.tmp && mv $fname.tmp $fname
        echo "New BuildId for $1: $today.$newbuild"
    fi
}

# Functionsf
UpdateBuildIdASM() {
    fname=$1
    cp $fname $fname.bak
    curdefine=$(cat $fname | grep "^BuildId: DB")
    today=$(date +%Y%m%d)
    newbuild=$(cat $fname | grep "BuildId: DB" | awk '{print $3}' | cut -f2 -d"."|sed 's/"//'|awk '{printf "%03d\n", $1 + 1;}')
    rc=$?
    if [ $rc = 0 ];then
        newdefine="BuildId: DB \"$today.$newbuild\""
        cat $fname | sed "s/$curdefine/$newdefine/" > $fname.tmp && mv $fname.tmp $fname
        echo "New BuildId for $1: $today.$newbuild"
    fi
}

genUpdateBatch() {
  echo "echo Preparing to update..." >> /tmp/msxpiupd.bat
  echo "pset DriveM ${GITPATH}/target"  >> /tmp/msxpiupd.bat
  echo "pdate" >> /tmp/msxpiupd.bat
  echo "echo Getting lastest updater..." >> /tmp/msxpiupd.bat
  echo "pcopy m:msxpirfh.bat" >> /tmp/msxpiupd.bat
  echo "pcopy m:msxpiupd.bat" >> /tmp/msxpiupd.bat
  echo "echo "  >> /tmp/msxpiupd.bat
  echo "echo Starting update" >> /tmp/msxpiupd.bat
  echo "msxpirfh" >> /tmp/msxpiupd.bat
  
  rm target/msxpirfh.bat  > /dev/null 2>&1
    
  for fn in `ls target | grep -v -i pcopy.com`
  do
    if [ -f target/${fn} ];then
      echo "pcopy m:${fn}" >> /tmp/msxpirfh.bat
    fi
  done
  for fn in `ls target/BASIC`
  do
    if [ -f target/BASIC/${fn} ];then
      echo "pcopy m:BASIC/${fn}" >> /tmp/msxpirfh.bat
    fi
  done
  echo "pcopy m:pcopy.com" >> /tmp/msxpirfh.bat
  
  echo "echo  " >> /tmp/msxpirfh.bat
  echo "pcd /home/pi/msxpi" >> /tmp/msxpirfh.bat
  echo "prun wget -q -O msxpi-server.py https://tinyurl.com/msxpi-server"  >> /tmp/msxpirfh.bat
  echo "echo "  >> /tmp/msxpirfh.bat
  echo "echo Restarting msxpi-server.py" >> /tmp/msxpirfh.bat
  echo "prestart" >> /tmp/msxpirfh.bat
  echo "pver" >> /tmp/msxpirfh.bat
  perl -pe 's/\r?\n/\r\n/' /tmp/msxpiupd.bat > target/msxpiupd.bat
  perl -pe 's/\r?\n/\r\n/' /tmp/msxpirfh.bat > target/msxpirfh.bat
  rm /tmp/msxpiupd.bat
  rm /tmp/msxpirfh.bat 
}

# MSX-Dos P Commands
if [ $buildClientCommands = "yes" ];then
  echo "Compiling MSXPi DOS Commands"
  $Z80ASM_PATH/z80asm.exe -I ./asm-common/include ./Client/src/template.com.asm -o ./target/template.com
  $Z80ASM_PATH/z80asm.exe -I ./asm-common/include ./Client/src/pdir.com.asm     -o ./target/pdir.com
  $Z80ASM_PATH/z80asm.exe -I ./asm-common/include ./Client/src/prun.com.asm     -o ./target/prun.com
  $Z80ASM_PATH/z80asm.exe -I ./asm-common/include ./Client/src/pset.com.asm     -o ./target/pset.com
  $Z80ASM_PATH/z80asm.exe -I ./asm-common/include ./Client/src/pcd.com.asm      -o ./target/pcd.com
  $Z80ASM_PATH/z80asm.exe -I ./asm-common/include ./Client/src/pwifi.com.asm    -o ./target/pwifi.com
  $Z80ASM_PATH/z80asm.exe -I ./asm-common/include ./Client/src/pdate.com.asm    -o ./target/pdate.com
  $Z80ASM_PATH/z80asm.exe -I ./asm-common/include ./Client/src/pcopy.com.asm    -o ./target/pcopy.com
  $Z80ASM_PATH/z80asm.exe -I ./asm-common/include ./Client/src/pplay.com.asm    -o ./target/pplay.com
  $Z80ASM_PATH/z80asm.exe -I ./asm-common/include ./Client/src/pvol.com.asm     -o ./target/pvol.com
  $Z80ASM_PATH/z80asm.exe -I ./asm-common/include ./Client/src/pver.com.asm     -o ./target/pver.com
  $Z80ASM_PATH/z80asm.exe -I ./asm-common/include ./Client/src/dosinit.com.asm  -o ./target/dosinit.com
  $Z80ASM_PATH/z80asm.exe -I ./asm-common/include ./Client/src/at28c256.com.asm -o ./target/at28c256.com
  $Z80ASM_PATH/z80asm.exe -I ./asm-common/include ./Client/src/preboot.com.asm  -o ./target/preboot.com
  $Z80ASM_PATH/z80asm.exe -I ./asm-common/include ./Client/src/prestart.com.asm -o ./target/prestart.com
  $Z80ASM_PATH/z80asm.exe -I ./asm-common/include ./Client/src/pshut.com.asm    -o ./target/pshut.com
  $Z80ASM_PATH/z80asm.exe -I ./asm-common/include ./Client/src/chatgpt.com.asm  -o ./target/chatgpt.com
  $Z80ASM_PATH/z80asm.exe -I ./asm-common/include ./Client/src/ploadr.com.asm   -o ./target/ploadr.com
  $Z80ASM_PATH/z80asm.exe -I ./asm-common/include ./Client/src/sendcmd.com.asm  -o ./target/sendcmd.com
  $Z80ASM_PATH/z80asm.exe -I ./asm-common/include ./Client/src/preset.com.asm   -o ./target/preset.com
fi

if [ $buildBIOS = "yes" ];then
  echo "Compiling MSXPi BIOS and MSX-DOS ROM"
  $ZMAC_PATH/zmac.exe -I ./asm-common/include -I ./ROM/src/MSX-DOS ./ROM/src/MSX-DOS/msx-dos.mac
  
  UpdateBuildIdASM ./ROM/src/MSX-DOS/msxpi-driver.mac
  UpdateBuildIdASM ./ROM/src/BIOS/msxpibios.asm   
  UpdateBuildIdASM ./ROM/src/BIOS/msxpiext.asm 
  UpdateBuildId    ./Server/Python/src/msxpi-server.py
  
  # Build MSX-DOS Driver
  [ -f ./zout/msx-dos.hex ] && $HEX2BIN_PATH/hex2bin.exe -s 4000 ./zout/msx-dos.hex && cp ./zout/msx-dos.bin ./target/msxpidos.rom
  
  # Build BIOS
  $Z80ASM_PATH/z80asm.exe -I ./asm-common/include ./ROM/src/BIOS/msxpibios.asm  -o ./target/msxpibios.rom
  
  # Build BASIC BIOS Extension
  $Z80ASM_PATH/z80asm.exe -I ./asm-common/include ./ROM/src/BIOS/msxpiext.asm   -o ./target/msxpiext.bin

  # Create an optonal 2-bank ROMs for the EEPROM
  cat $BIOSFILE > target/multirom.rom
  cat $ROMBANK2 >> target/multirom.rom
fi

if [ $buildMSXStuff = "yes" ];then
  genUpdateBatch
  # Update build ID
  cp target/disks/blank.dsk target/disks/msxpiboot.dsk
  cp target/disks/blank.dsk target/disks/tools.dsk

  # Generate msxpiboot.dsk disk image
  for file in `ls $HOME/Dev/MSX/MSXDOS13/`
  do
    echo $file
    [ -f $HOME/Dev/MSX/MSXDOS13/$file ] && python3 -W ignore $HOME/Dev/github/MSXPi/software/dsktool.py copy $HOME/Dev/MSX/MSXDOS13/$file target/disks/msxpiboot.dsk:/$file
    [ -f $HOME/Dev/MSX/MSXDOS13/$file ] && python3 -W ignore $HOME/Dev/github/MSXPi/software/dsktool.py copy $HOME/Dev/MSX/MSXDOS13/$file target/disks/tools.dsk:/$file
  done

  # Add the MSXPi commands and ROM only to msxpiboot.dsk
  for file in `ls target/`
  do
    [ -f target/$file ] && python3 -W ignore ./dsktool.py copy target/$file target/disks/msxpiboot.dsk:/$file
  done
  for f in `ls target/BASIC/`
  do
    [ -f target/BASIC/$file ] && python3 -W ignore ./dsktool.py copy target/BASIC/$file target/disks/msxpiboot.dsk:/$file
  done
fi

if [ $buildOpenMSXConfig = "yes" ];then
  # Update sources for openMSX extensions - to keep up to date with openMSX fork
  cp $OPENMSXSRC/src/MSXPiDevice.cc         openMSX/src/MSXPiDevice.cc
  cp $OPENMSXSRC/src/MSXPiDevice.hh         openMSX/src/MSXPiDevice.hh
  cp $OPENMSXSRC/src/DeviceFactory.cc       openMSX/src/DeviceFactory.cc
  cp $OPENMSXSRC/build/msvc/openmsx.vcxproj openMSX/build/msvc/openmsx.vcxproj
  
  # do not replace the msxpibios on every build to avoid users having to update their bios/sha constantly
  #SHA=$(sha1sum $BIOSFILE | cut -f1 -d" ")
  #sed "s/msxpibiossha/$SHA/" MSXPi.xml.template > $XMLPATH/MSXPi.xml
  #cp target/msxpibios.rom openMSX/share/systemroms/extensions/msxpibios.rom
fi



